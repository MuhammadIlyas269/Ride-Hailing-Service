# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
service: safeer-backend-hiring-project

frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: us-east-1

package:
  individually: true
  patterns:
    - '!./**'
    - '!node_modules/**'
    - ./src/common/**

custom:
  pythonRequirements:
     layer: true
  settings:
    TRIP_DYNAMODB_TABLE: Trips

functions:
  TripFare:
    handler: src/api/trip_fare.lambda_handler
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      API_KEY: "AIzaSyAm802xgN0Ys6XQAN-5eV4A4Tudff1CQ_I" # Its for demo purpose, In real case all envrionment variables are in seperate file which is not a part of git repository
    package:
      patterns: ## files to be included in lambda (Each lambda will have common files + it own handler + other file in its folder)
        - ./src/api/trip_fare.py
    iamRoleStatementsName: TripFare-policy-sls-${self:provider.region}-${self:provider.stage}
    events:
      - http:
          path: trip/fare
          method: get
          cors: True

  CreateTrip:
    handler: src/api/create_trip.lambda_handler
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      TRIP_TABLE: ${self:custom.settings.TRIP_DYNAMODB_TABLE} 
    package:
      patterns: ## files to be included in lambda (Each lambda will have common files + it own handler + other file in its folder)
        - ./src/api/create_trip.py
        - ./src/validations/create_trip.py

    iamRoleStatementsName: CreateTrip-policy-sls-${self:provider.region}-${self:provider.stage}
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
          Resource:
              - !GetAtt tripTable.Arn
    events:
      - http:
          path: trip/create
          method: post
          cors: True
  
  MarkTripComplete:
    handler: src/api/complete_trip.lambda_handler
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      TRIP_TABLE: ${self:custom.settings.TRIP_DYNAMODB_TABLE} 
    package:
      patterns: ## files to be included in lambda (Each lambda will have common files + it own handler + other file in its folder)
        - ./src/api/complete_trip.py
    iamRoleStatementsName: MarkTripComplete-policy-sls-${self:provider.region}-${self:provider.stage}
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:UpdateItem
            - dynamodb:GetItem
          Resource:
            - !GetAtt tripTable.Arn
    events:
      - http:
          path: trip/{tripId}/complete
          method: post
          cors: True
  
  CompleteTrips:
    handler: src/api/get_completed_trips.lambda_handler
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      TRIP_TABLE: ${self:custom.settings.TRIP_DYNAMODB_TABLE} 
    package:
      patterns: ## files to be included in lambda (Each lambda will have common files + it own handler + other file in its folder)
        - ./src/api/get_completed_trips.py
    iamRoleStatementsName: CompleteTrips-policy-sls-${self:provider.region}-${self:provider.stage}
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
          Resource:
            - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.settings.TRIP_DYNAMODB_TABLE}/index/status-date-index
    events:
      - http:
          path: trips/complete
          method: get
          cors: True

# AWS Resources
resources:
  Resources:
    tripTable: # Trips Dynamodb Table
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.settings.TRIP_DYNAMODB_TABLE} 
        AttributeDefinitions:
          - AttributeName: "Pk"
            AttributeType: "S"
          - AttributeName: "status"
            AttributeType: "S"
          - AttributeName: "created_at"
            AttributeType: "S"
        KeySchema: 
          - AttributeName: "Pk"
            KeyType: "HASH"
        GlobalSecondaryIndexes:
          - IndexName: status-date-index
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection:
              NonKeyAttributes: [ ]
              ProjectionType: ALL
        BillingMode: "PAY_PER_REQUEST"
        Tags: 
          - Key: "Name"
            Value: ${self:custom.settings.TRIP_DYNAMODB_TABLE}
